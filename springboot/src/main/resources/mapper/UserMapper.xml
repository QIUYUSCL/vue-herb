<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.example.springboot.mapper.UserMapper">

    <select id="selectAll" parameterType="int" resultType="org.example.springboot.entity.UserInfo">
        select * from user_info
    </select>

    <select id="selectById" parameterType="int" resultType="org.example.springboot.entity.UserInfo">
        select * from user_info where user_id = #{id}
    </select>

    <select id="selectByUsernameAndPassword" parameterType="map" resultType="org.example.springboot.entity.UserInfo">
        SELECT * FROM user_info
        WHERE username = #{username} AND password = #{password}
    </select>

    <insert id="insertUser" parameterType="org.example.springboot.entity.UserInfo">
        INSERT INTO user_info (username, password, avatar, phone, email, gender, status, createTime, updateTime)
        VALUES (#{username}, #{password}, COALESCE(#{avatar}, 'https://img.88icon.com/download/jpg/20201226/9d64c2d320c079cbd4f38f10e066dc71_512_512.jpg!bg'),
                #{phone}, #{email}, #{gender}, #{status}, NOW(), NOW())
    </insert>

    <select id="getUserCommentsByUserId" parameterType="int" resultType="org.example.springboot.entity.UserComment">
        SELECT * FROM user_comment WHERE user_id = #{userId}
    </select>

    <select id="getUserHistoryByUserId" parameterType="int" resultType="org.example.springboot.entity.UserHistory">
        SELECT * FROM user_history WHERE user_id = #{userId}
    </select>

    <select id="getUserInteractionsByUserId" parameterType="int" resultType="org.example.springboot.entity.UserInteraction">
        SELECT * FROM user_interaction WHERE user_id = #{userId}
    </select>

    <resultMap id="UserInteractionCountResultMap" type="org.example.springboot.entity.UserInteractionCount">
        <result property="likeCount" column="like_count"/>
        <result property="collectCount" column="collect_count"/>
        <result property="commentCount" column="comment_count"/>
    </resultMap>

    <select id="countUserInteractions" parameterType="int" resultMap="UserInteractionCountResultMap">
        SELECT
            SUM(CASE WHEN ui.action_type = 'LIKE' THEN 1 ELSE 0 END) AS like_count,
            SUM(CASE WHEN ui.action_type = 'COLLECT' THEN 1 ELSE 0 END) AS collect_count,
            COUNT(uc.comment_id) AS comment_count
        FROM
            user_interaction ui
                LEFT JOIN
            user_comment uc ON ui.user_id = uc.user_id AND ui.target_id = uc.target_id AND ui.target_type = uc.target_type
        WHERE
            ui.user_id = #{userId}
        -- 建议添加 GROUP BY 确保结果按用户分组
        GROUP BY ui.user_id
    </select>


    <update id="updateUserInfo" parameterType="org.example.springboot.entity.UserInfo">
        UPDATE user_info
        SET
            username = #{username},
            phone = #{phone},
            email = #{email},
            gender = #{gender},
            updateTime = NOW()
        WHERE user_id = #{user_id}
    </update>

    <update id="updatePassword">
        UPDATE user_info
        SET password = #{newPassword}, updateTime = NOW()
        WHERE user_id = #{userId} AND password = #{oldPassword}
    </update>

    <insert id="insertUserInteraction" parameterType="org.example.springboot.entity.UserInteraction">
        INSERT INTO user_interaction (user_id, target_type, target_id, action_type, create_time)
        VALUES (#{user_id}, #{target_type}, #{target_id}, #{action_type}, NOW())
    </insert>

    <select id="getUserCollectionsByUserId" parameterType="int" resultType="org.example.springboot.entity.UserInteraction">
        SELECT * FROM user_interaction
        WHERE user_id = #{userId}
          AND action_type = 'COLLECT'
    </select>

    <select id="hasViewedToday" parameterType="map" resultType="int">
        SELECT COUNT(*)
        FROM user_history
        WHERE user_id = #{params.userId}
          AND target_type = #{params.targetType}
          AND target_id = #{params.targetId}
          AND DATE(create_time) = CURDATE()
    </select>

    <insert id="insertUserHistory" parameterType="org.example.springboot.entity.UserHistory">
        INSERT INTO user_history (user_id, target_type, target_id, create_time)
        VALUES (#{user_id}, #{target_type}, #{target_id}, NOW())
    </insert>

    <insert id="insertUserComment" parameterType="org.example.springboot.entity.UserComment">
        INSERT INTO user_comment (user_id, target_type, target_id, parent_id, content, status, create_time)
        VALUES (#{user_id}, #{target_type}, #{target_id}, #{parent_id}, #{content}, COALESCE(#{status}, '0'), NOW())
    </insert>

    <update id="updateCommentsCount" parameterType="map">
        <choose>
            <when test="targetType == 'VIDEO'">
                UPDATE video_info
                SET comments = comments + 1
                WHERE video_id = #{targetId}
            </when>
            <when test="targetType == 'ARTICLE'">
                UPDATE daily_learning
                SET comments = comments + 1
                WHERE article_id = #{targetId}
            </when>
        </choose>
    </update>

</mapper>